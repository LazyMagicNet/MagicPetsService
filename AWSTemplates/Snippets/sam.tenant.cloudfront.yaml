
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${SystemNameParameter}-${TenantKeyParameter}-${GuidParameter}
        Description: 'Origin Access Control for S3'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4  


  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub '${SubDomainParameter}.${RootDomainParameter}'
        Comment: !Sub '${AWS::StackName}-${TenantKeyParameter}'
        Logging:
          Bucket: !Sub '${CDNLogBucketNameParameter}.s3.amazonaws.com'
          IncludeCookies: false 
          Prefix: !Sub '${TenantKeyParameter}/'

        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: 'index.html'
        IPV6Enabled: true
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArnParameter
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: 'sni-only'

        DefaultCacheBehavior: 
          TargetOriginId: TenancyAssetsOrigin
          ViewerProtocolPolicy: 'redirect-to-https'
          CachePolicyId: !Ref CachePolicyIdParameter
          OriginRequestPolicyId: !Ref OriginRequestPolicyIdParameter
          ResponseHeadersPolicyId: !GetAtt ResponseHeadersPolicy.Id
          FunctionAssociations:
            - EventType: 'viewer-request'
              FunctionARN: !GetAtt LandingPageFunction.FunctionARN
            # - EventType: 'viewer-response'
            #   FunctionARN: !Ref ResponseFunctionArnParameter


        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/404.html'
          - ErrorCachingMinTTL: 60
            ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: '/index.html'

        CacheBehaviors:

          - PathPattern: '/Tenancy/*'
            # Tenancy Assets are served from the TenancyAssetsOrigin S3 bucket
            # The RequestPrefixFunction is used to remove the /Tenancy/prefix from the request URI
            TargetOriginId: TenancyAssetsOrigin
            ViewerProtocolPolicy: 'redirect-to-https'
            ResponseHeadersPolicyId: !GetAtt ResponseHeadersPolicy.Id
            CachePolicyId: !Ref CachePolicyIdParameter
            AllowedMethods: 
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            FunctionAssociations:
              - EventType: 'viewer-request'
                FunctionARN: !Ref RequestPrefixFunctionArnParameter
              # - EventType: 'viewer-response'
              #   FunctionARN: !Ref ResponseFunctionArnParameter

          - PathPattern: '/System/*'
            # System Assets are served from the SystemAssetsOrigin S3 bucket
            # The RequestPrefixFunction is used to remove the /System/prefix from the request URI
            TargetOriginId: SystemAssetsOrigin
            ViewerProtocolPolicy: 'redirect-to-https'
            ResponseHeadersPolicyId: !GetAtt ResponseHeadersPolicy.Id
            CachePolicyId: !Ref CachePolicyIdParameter
            AllowedMethods: 
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            FunctionAssociations:
              - EventType: 'viewer-request'
                FunctionARN: !Ref RequestPrefixFunctionArnParameter
              # - EventType: 'viewer-response'
              #   FunctionARN: !Ref ResponseFunctionArnParameter

          - PathPattern: '/config'
            # Note that while we reference the TenancyAssetsOrigin S3 bucket, the config response is generated by the ConfigFunction,
            # so the S3 bucket is not actually accessed. 
            TargetOriginId: TenancyAssetsOrigin
            ViewerProtocolPolicy: 'redirect-to-https'
            CachePolicyId: !Ref CachePolicyIdParameter
            OriginRequestPolicyId: !Ref OriginRequestPolicyIdParameter
            ResponseHeadersPolicyId: !GetAtt ResponseHeadersPolicy.Id
            AllowedMethods: 
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            FunctionAssociations:
              - EventType: 'viewer-request'
                FunctionARN: !GetAtt ConfigFunction.FunctionARN
              # - EventType: 'viewer-response'
              #   FunctionARN: !Ref ResponseFunctionArnParameter

          # Generated webapp cache behaviors
#LzCacheBehaviors#         


        Origins:
          # Origin serving tenancy config
          - Id: TenancyAssetsOrigin
            DomainName: !Sub '${AssetsBucketNameParameter}.s3.amazonaws.com'
            S3OriginConfig: {}
            OriginAccessControlId: !Ref OriginAccessControl

          - Id: SystemAssetsOrigin
            DomainName: !Sub '${SystemAssetsBucketNameParameter}.s3.amazonaws.com'
            S3OriginConfig: {}
            OriginAccessControlId: !Ref OriginAccessControl


           # LazyMagic generated webapp origins
#LzWebAppOrigins#

           # LazyMagic generated api origins
#LzApiOrigins#

           # LazyMagic generated websocket origins  
#LzWsOrigins#

  # LazyMagic generated config function
#LzConfigFunction#

  # LazyMagic generated landing page function
#LzLandingPageFunction#


  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: HasSubDomain 
    Properties:
      HostedZoneId: !Ref HostedZoneIdParameter
      RecordSets:
      - Name: !Sub '${SubDomainParameter}.${RootDomainParameter}'
        Type: 'A'
        AliasTarget:
          DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
          EvaluateTargetHealth: false
          # The  following HostedZoneIdParameter is always used for alias records pointing to CF.
          HostedZoneId: 'Z2FDTNDATAQYW2' 
