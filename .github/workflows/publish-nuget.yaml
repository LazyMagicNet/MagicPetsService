name: Publish NuGet
# This workflow is triggered on pushes to the master branch.
# 
# It builds and publishes the service lambdas binaries as assests in a release
# and publishes the service nuget packages to the GitHub NuGet feed.
# 
# The release and package(s) version is determined by the ServiceVersion.props file in the 
# Visual Studio solution folder.
#
# This workflow checks if the release already exists and errors out if it does.
# Note that nuget feeds are immutable, so trying to push an existing version to a feed
# will also error this script. Basically, we are treating release versions the same way we 
# treat nuget package versions. They are immutable and cannot be changed once published.
#
########################
# The basic idea here is we are treating the service lambdas and corrosponding nuget 
# packages that allow access to the lambdas as a single versionable asset. 
# This means that we can, and often do, get NuGet packages that are identical except
# for their version numbers. This is a tradeoff we are making to simplify the deployment
# process and remove any question about which version of the nuget packages work with 
# any specific lambda version. Note that the nuget packages generated code and never 
# change independantly of the lambda code. Also, these nuget packages are very small 
# files (ranging from 10KB to 50KB).
#
########################
on:
  push:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Read ServiceVersion.props and write ServiceVersion.txt
      # Unfortunately, echo to GITHUB_ENV in pwsh doesn't seem to work correctly
      # so we write to a temporary file instead and then use cat to read the file in 
      # the next step using the bash shell.
      id: read_version
      shell: pwsh
      run: |
        [xml]$xmlContent = Get-Content ./ServiceVersion.props
        $serviceVersion = $xmlContent.Project.PropertyGroup.ServiceVersion
        Set-Content -Path 'ServiceVersion.txt' -Value v$serviceVersion

    - name: Read ServiceVersion.txt and set env.SERVICE_VERSION
      shell: bash
      run: |
        SERVICE_VERSION=$(cat ServiceVersion.txt)
        echo "SERVICE_VERSION=$SERVICE_VERSION" >> $GITHUB_ENV

    - name: Check if release exists and error out if it does
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Ensuring the token is available for authentication
        TAG_NAME: ${{ env.SERVICE_VERSION }} # Set this to the tag name you're checking for
      run: |
        echo "Checking for release $TAG_NAME..."
        RELEASES=$(curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/${{ github.repository }}/releases")
        EXISTS=$(echo $RELEASES | jq '.[] | select(.tag_name == env.TAG_NAME) | .id')
        if [ ! -z "$EXISTS" ]; then
          echo "Release $TAG_NAME already exists."
          exit 1
        else
          echo "Release $TAG_NAME does not exist. Continuing..."
        fi
      shell: bash

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'

    - name: Create NuGet.Config
      # Set up NuGet.Config to use the GitHub InSciCo NuGet feed. 
      # TODO: Remove this step when we publish the latest LazyMagic libs to NuGet.org
      run: |
        dotnet nuget add source --username not-required --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name InSciCo "https://nuget.pkg.github.com/InSciCo/index.json"
        cat > NuGet.Config << EOF
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <packageSourceMapping>
            <packageSource key="nuget.org">
              <package pattern="*" />
            </packageSource>
            <packageSource key="InSciCo">
              <package pattern="*" />
              <!-- Add other patterns as needed -->
            </packageSource>
          </packageSourceMapping>
        </configuration>
        EOF

    - name: Restore dependencies
      run: |
        dotnet restore

    - name: Build # Build solution
      run: | 
        dotnet build --no-restore --configuration Release

    - name: Publish Release
      id: create_release 
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: "${{ env.SERVICE_VERSION }}"
        name: "Release ${{ env.SERVICE_VERSION }}"
        draft: false
        prerelease: false
        files: |
          ./Release/*.zip

    - name: Publish Nuget
      run: |
        dotnet nuget push ./Packages/*.nupkg --source https://nuget.pkg.github.com/LazyMagicNet/index.json --api-key ${{ secrets.GITHUB_TOKEN }}
        dotnet nuget push ./Packages/*.snupkg --source https://nuget.pkg.github.com/LazyMagicNet/index.json --api-key ${{ secrets.GITHUB_TOKEN }}